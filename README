Features
----------------------------------

Project Based - Open the editor from within app root. Work on multiple projects in different windows
Minimalist
  Useful for laptops with small screens but still takes advantage of high res
  Good for developers who don't like clutter
  No menus or toolbars just simple, accessible shortcuts
Opinionated - You don't need a mouse!
Robust - All built with well factored, well tested Ruby code
Support for the cutting edge Ruby and Rails tools such as RSpec, jQuery, Haml, Sass
Configurable - With everyones friend, YAML. Reload configuration files with the touch of a shortcut
Panels - A more flexible modaless way to accept input

Why?
----------------------------------
* Nothing like it exists
* It's a different way of working that some people will hopefully find more productive
* It focuses on doing one thing - making a good editor for Rails
* Alternatives and plugins are buggy or bloated
* Ruby 1.9.2 is now stable and fast
* New modules/functionality can be added easily
* I want to see if I can work without a mouse (at least for editing code). Existing editors don't really allow this

Roadmap
----------------------------------

* Iteration 1 - Basic functionality
X  Loading
X  Saving
X  Framework
X  Scrollbars
X  Colors
X  Tabs

* Iteration 2 - A useable editor
-  Undo/Redo (CTRL+Z, CTRL+SHIFT+Z)
X  Multi-file switching (CTRL+TAB)
  Open file (CTRL+O)
  Close file (CTRL+W)

* Iteration 3 - A full featured text editor
X  Change title to file name when switching windows
X  changed file indication (e.g. *)
  Find/Replace (CTRL+F)
  Rework MessageHelper to use DocPanel

* Iteration 4 - An advanced text editor
  Remove trailing space on save
  keep current indent on next line
  Multi-file find/replace (CTRL+SHIFT+F)
  Save window position

* Iteration 5 - A useable Ruby editor
  Syntax colouring (Ruby, YAML)
  Line numbers
  Highlight current line

* Iteration 6 - Advanced Ruby editor
  Bracket matching
  Snippets (Smart code tab completion). Need visual indication that smart code is running
  Output window
  Integrated autospec

* Iteration 7 - Rails editor
  Syntax colouring (HAML, SASS, jQuery)
  Snippets (HAML, SASS)

Future features

  rcov - pretty test coverage output
  rspec - pretty html specs output
  Git support (do git add before reloading files? or between loads/saves?)
  rdoc - builtin help using rdoc - somehow for ruby as well
  handle really large files (e.g. SQL dump or log file)

Ideas
-------------------
Routing should have a context that contains a  description of
state the editor should be in for the action to be called. For example, tab
completion should be triggered after words, indenting at the beginning of a
line etc. Perhaps it could look something like this:

map.editor "TAB" => 'indent', :when => {at_start_of_line?}
map.editor "TAB" => 'smart_code', :when => {after_word?}
map.editor "BACKSPACE" => 'dedent', :when => {previously_tabbed?}

Title bar should show the project directory
Then a bar at the top should should the full path of the currently view file. The language, column and line

